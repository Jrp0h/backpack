name: Release

on:
  push:
    tags:
      - v*

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.info.outputs.name }}
    steps:
      - name: Read info
        id: info
        shell: bash
        run: |
          echo ::set-output name=name::${GITHUB_REF/refs\/tags\//}

      - name: Create release
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: Backpack ${{ steps.info.outputs.name }}
          tag_name: ${{ steps.info.outputs.name }}
          draft: true
          prerelease: false

  build:
    needs: [create_release]
    strategy:
      matrix:
        platform:
          [
            "linux amd64",
            "linux arm64",

            "windows amd64",
            "windows arm64",

            "darwin amd64",
            "darwin arm64",

            "freebsd amd64",
            "freebsd arm64",
            "netbsd amd64",
            "netbsd arm64",
            "openbsd amd64",
            "openbsd arm64",
          ]
    name: Build ${{ matrix.platform }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Info
        id: info
        shell: bash
        run: |
          platform="${{ matrix.platform }}"
          ARCH="${platform##* }"
          OS="${platform%% *}"

          OUTPUT="backpack-${{ needs.create_release.outputs.version }}-$OS-$ARCH"

          echo "::set-output name=os::$OS"
          echo "::set-output name=arch::$ARCH"
          echo "::set-output name=output::$OUTPUT"

      - name: Build
        shell: bash
        run: |
          output="${{ steps.info.outputs.output }}"

          mkdir "$output"

          output_file="backpack"
          if [ "${{ steps.info.outputs.os }}" = "windows" ]; then
            output_file="backpack.exe"
          fi

          GOOS="${{ steps.info.outputs.os }}" GOARCH="${{ steps.info.outputs.arch }}" go build -o "$output/$output_file" main.go

      - name: Zip
        id: zip
        shell: bash
        run: |
          output="${{ steps.info.outputs.output }}"

          cp LICENSE README.md "$output/" # TODO: Add manpage and installer

          if [ "${{ steps.info.outputs.os }}" = "windows" ]; then
            zip -r "$output.zip" "$output/"

            echo "::set-output name=zipped::$output.zip"
            echo "::set-output name=mime::application/zip"
          else
            tar -czvf "$output.tar.gz" "$output/"

            echo "::set-output name=zipped::$output.tar.gz"
            echo "::set-output name=mime::application/gzip"
          fi

      - name: Upload ${{ matrix.platform }} to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.zip.outputs.zipped }}
          asset_name: ${{ steps.zip.outputs.zipped }}
          asset_content_type: ${{ steps.zip.outputs.mime }}
